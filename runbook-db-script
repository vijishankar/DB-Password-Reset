

$ResourceGroupName = "CPTDevops"
$SeverName = "cptdevopssql"
$KeyVaultName = "CptDevopsKeyVault"
$SecretName = "secret1"



$connectionName = "AzureRunAsConnection"
	try
	{
		$servicePrincipalConnection = Get-AutomationConnection -Name $connectionName         

		Write-Verbose "Logging in to Azure..." -Verbose

		Add-AzureRmAccount `
			-ServicePrincipal `
			-TenantId $servicePrincipalConnection.TenantId `
			-ApplicationId $servicePrincipalConnection.ApplicationId `
			-CertificateThumbprint $servicePrincipalConnection.CertificateThumbprint | Out-Null
	}
	catch {
		if (!$servicePrincipalConnection)
		{
			$ErrorMessage = "Connection $connectionName not found."
			throw $ErrorMessage
		} else{
			Write-Error -Message $_.Exception
			throw $_.Exception
		}
	}


Write-Output $ResourceGroupName

$sqlserver = Get-AzureRmSqlServer -ResourceGroupName $ResourceGroupName -ServerName $SeverName -ErrorVariable notPresent -ErrorAction SilentlyContinue
Write-Output $sqlserver
$keyVault= Get-AzureRmKeyVault -VaultName $keyVaultName -ErrorVariable notPresent -ErrorAction SilentlyContinue
Write-Output $keyVault

function changePassword()
{
if($sqlserver)
{

#Generating Random Password from RandomCharacters Method
$Resetpassword = -join((65..90) + (97..122)  + (32..47) + (48 .. 57) | Get-Random -Count 15 | % {[char]$_})
Write-Host $Resetpassword
Write-Output $Resetpassword


#Updating the password
$SecureStringpwd = ConvertTo-SecureString $Resetpassword -AsPlainText -Force
Set-AzureRmSqlServer -ResourceGroupName $ResourceGroupName -ServerName $SeverName -SqlAdministratorPassword $SecureStringpwd

Write-Host $newpsswd
Write-Output $newpsswd

if($SecretValue -ne $SecureStringpwd)
{
Set-AzureKeyVaultSecret -VaultName $keyVaultName -Name $SecretName -SecretValue $SecureStringpwd
Write-Output "SecretValue updated"
}
}

else{
Write-Host "There is no Sql Server in the given Resource Group"
}

}

changePassword
